<?php
/**
 * @copyright 2017-present Hostnet B.V.
 */
declare(strict_types=1);

namespace Hostnet\Component\Webpack\Configuration;

class ConfigGenerator
{
    /**
     * @var CodeBlock[]
     */
    private $blocks;

    /**
     * @param  CodeBlockProviderInterface $entity
     * @return ConfigGenerator
     */
    public function addExtension(CodeBlockProviderInterface $entity)
    {
        foreach ($entity->getCodeBlocks() as $block) {
            $this->addBlock($block);
        }

        return $this;
    }

    /**
     * @param  CodeBlock $block
     * @return ConfigGenerator
     */
    public function addBlock(CodeBlock $block)
    {
        $this->blocks[] = $block;

        return $this;
    }

    public function getConfiguration()
    {
        $tab1   = str_repeat(' ', 4); // "one tab" spacing for 'pretty' output
        $tab2   = str_repeat(' ', 8); // "two tabs" spacing for 'pretty' output
        $code   = [];
        $code[] = '/* Generated by hostnet/webpack-bundle. Do not modify. */';
        $code[] = 'var webpack = require(\'webpack\');';
        $code[] = '';

        // Apply headers
        $code[] = $this->getChunks(CodeBlock::HEADER);
        $code[] = 'module.exports = {';

        // Apply entries (split points)
        $code[] = '';
        $code[] = 'entry : ' . json_encode(
            $this->getChunks(CodeBlock::ENTRY, false, false),
            JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT
        ) . ',';
        $code[] = 'output : ' . json_encode(
            $this->getChunks(CodeBlock::OUTPUT, false, false),
            JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT
        ) . ',';
        $code[] = 'resolve : ' . json_encode(
            $this->getChunks(CodeBlock::RESOLVE, false, false),
            JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT
        ) . ',';
        $code[] = 'resolveLoader : ' . json_encode(
            $this->getChunks(CodeBlock::RESOLVE_LOADER, false, false),
            JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT
        ) . ',';
        $code[] = 'plugins : [';
        $code[] = $tab1 . $this->getChunks(CodeBlock::PLUGIN, ', ' . PHP_EOL . $tab1, ',' . PHP_EOL . $tab1);
        $code[] = '],';
        $code[] = 'module : {';
        $code[] = $tab1 . 'preLoaders : [';
        $code[] = $tab2 . $this->getChunks(CodeBlock::PRE_LOADER, ',' . PHP_EOL . $tab2, ',' . PHP_EOL . $tab2);
        $code[] = $tab1 . '],';
        $code[] = $tab1 . 'loaders : [';
        $code[] = $tab2 . $this->getChunks(CodeBlock::LOADER, ',' . PHP_EOL . $tab2, ',' . PHP_EOL . $tab2);
        $code[] = $tab1 . '],';
        $code[] = $tab1 . 'postLoaders : [';
        $code[] = $tab2 . $this->getChunks(CodeBlock::POST_LOADER, ',' . PHP_EOL . $tab2, ',' . PHP_EOL . $tab2);
        $code[] = $tab1 . ']';

        if (!empty($this->getChunks(CodeBlock::ROOT))) {
            $code[] = '},';
            $code[] = $this->getChunks(CodeBlock::ROOT);
        } else {
            $code[] = '}';
        }

        $code[] = '};';
        $code[] = '';

        return implode(PHP_EOL, $code);
    }

    /**
     * @param  string $type
     * @param  string|bool $delimiter
     * @param  string|bool $internal_delimiter
     * @return string
     */
    private function getChunks($type, $delimiter = PHP_EOL, $internal_delimiter = PHP_EOL)
    {
        $chunks = [];
        foreach ($this->blocks as $block) {
            if ($block->has($type)) {
                if ($internal_delimiter === false) {
                    $chunks = array_merge_recursive($chunks, $block->get($type));
                } else {
                    $chunks[] = implode($internal_delimiter, (array) $block->get($type));
                }
            }
        }

        return $delimiter === false ? $chunks : implode($delimiter, $chunks);
    }
}
