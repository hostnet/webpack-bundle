<?php
/**
 * @copyright 2017-present Hostnet B.V.
 */
declare(strict_types=1);

namespace Hostnet\Component\Webpack\Configuration;

/**
 * A CodeBlock is a collection of JavaScript snippets that will be combined and compiled to one javascript file. This
 * file represents the final webpack configuration.
 *
 * Code-blocks allows injecting code in the following sections of the configuration file:
 *
 *      var webpack = require('webpack');
 *      <<header>>
 *
 *      module.exports = {
 *          entry : {
 *              // Generated by webpack-bundle
 *          },
 *          resolve : {
 *              <<resolve>>
 *          },
 *          plugins : [
 *              <<plugin>>
 *          ],
 *          module : {
 *              preLoaders : [
 *                  <<pre_loader>>
 *              ],
 *              loaders : [
 *                  <<loader>>
 *              ],
 *              post_loaders : [
 *                  <<post_loader_>>
 *              ],
 *          },
 *          output : {
 *              << output >>
 *          }
 *          << root >>
 *      };
 */
class CodeBlock
{
    public const HEADER         = 'header';
    public const ENTRY          = 'entry';
    public const RESOLVE        = 'resolve';
    public const RESOLVE_LOADER = 'resolve_loader';
    public const PLUGIN         = 'plugin';
    public const PRE_LOADER     = 'pre_loader';
    public const LOADER         = 'loader';
    public const POST_LOADER    = 'post_loader';
    public const OUTPUT         = 'output';
    public const ROOT           = 'root';

    // Available types to allow easy validation
    private $types = [
        'entry',
        'header',
        'resolve',
        'resolve_loader',
        'plugin',
        'pre_loader',
        'loader',
        'post_loader',
        'output',
        'root',
    ];

    // Chunks collection
    private $chunks = [];

    /**
     * @param  string $chunk
     * @param  mixed $code
     * @return CodeBlock
     */
    public function set($chunk, $code): CodeBlock
    {
        if (false === \in_array($chunk, $this->types, false)) {
            throw new \InvalidArgumentException(sprintf(
                'Invalid insertion point "%s". Available points are: %s.',
                $chunk,
                implode(', ', $this->types)
            ));
        }

        if (isset($this->chunks[$chunk])) {
            throw new \InvalidArgumentException(sprintf('The chunk "%s" is already in use.', $chunk));
        }

        $this->chunks[$chunk] = $code;

        return $this;
    }

    /**
     * Returns the code associated with the given chunk.
     *
     * @param  string $chunk
     * @return mixed
     */
    public function get($chunk)
    {
        if (false === isset($this->chunks[$chunk])) {
            throw new \InvalidArgumentException(sprintf('This code block does not have a chunk for "%s".', $chunk));
        }

        return $this->chunks[$chunk];
    }

    /**
     * Returns true if this code-block has the given chunk defined.
     *
     * @param  string $chunk
     * @return bool
     */
    public function has($chunk): bool
    {
        return isset($this->chunks[$chunk]);
    }
}
